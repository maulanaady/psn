# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:2.5.3
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
---
# x-logging:
#   &default-logging
#   driver: "json-file"
#   options:
#     max-size: "1m"
#     max-file: "1"
#     tag: "{{.Name}}"

x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider packages you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
  #image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.5.3}
  image: adysulton/airflow:2.10.2-python3.9 #custom-airflow
  environment:
    &airflow-common-env
    AIRFLOW__CORE__PARALLELISM: 32
    AIRFLOW__CORE__MAX_ACTIVE_TASKS_PER_DAG: 16
    AIRFLOW__CORE__MAX_TIS_PER_QUERY: 16
    AIRFLOW__CORE__MIN_SERIALIZED_DAG_UPDATE_INTERVAL: 300
    AIRFLOW__CORE__MIN_SERIALIZED_DAG_FETCH_INTERVAL: 300
    AIRFLOW__CORE__TEST_CONNECTION: "Enabled"
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: "true"
    AIRFLOW__CORE__LAZY_LOAD_PLUGINS: "false"
    AIRFLOW__CORE__LOAD_EXAMPLES: "false"
    AIRFLOW__CORE__FERNET_KEY: "no6dt7bk-yWKnZaHBGKMu9VXv--YMiIXPcRMigFyvUs=" # ini

    AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 300
    # AIRFLOW__SCHEDULER__PROCESSOR_POLL_INTERVAL: 10
    AIRFLOW__SCHEDULER__PARSING_PROCESSES: 2
    # AIRFLOW__SCHEDULER__MIN_FILE_PARSING_LOOP_TIME: 60
    # AIRFLOW__SCHEDULER__MAX_THREADS: 50
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 3000
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: "true"
    AIRFLOW__SCHEDULER__TRIGGER_TIMEOUT_CHECK_INTERVAL: 180

    AIRFLOW__WEBSERVER__DEFAULT_UI_TIMEZONE: "Asia/Jakarta"
    AIRFLOW__WEBSERVER__RBAC: "true"

    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow

    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0

    AIRFLOW__API__AUTH_BACKENDS: "airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session"

    AIRFLOW__METRICS__STATSD_ON: "false"
    AIRFLOW__METRICS__STATSD_PORT: "9125"
    AIRFLOW__METRICS__STATSD_HOST: "172.20.12.147"
    AIRFLOW__METRICS__STATSD_PREFIX: "airflow"

    # Use simple http server on scheduler for health checks
    # See https://airflow.apache.org/docs/apache-airflow/stable/administration-and-deployment/logging-monitoring/check-health.html#scheduler-health-check-server
    # yamllint enable rule:line-length
    # WARNING: Use _PIP_ADDITIONAL_REQUIREMENTS option ONLY for a quick checks
    # for other purpose (development, test and especially production usage) build/extend Airflow image.

    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  #   extra_hosts:      # ini
  #     - "airflow-worker_1:192.168.13.15" # "worker-01-hostname:192.168.0.11"
  # #    - "airflow-worker_2:192.168.1.211" # "worker-01-hostname:192.168.0.11"
  #     - "airflow-worker_2:192.168.1.212" # "worker-01-hostname:192.168.0.11"

  volumes:
    - ./data/dags:/opt/airflow/dags
    - ./data/include:/opt/airflow/include
    - ./data/logs:/opt/airflow/logs
    - ./data/plugins:/opt/airflow/plugins
    - ./data/config:/opt/airflow/config
    - ./data/data:/opt/airflow/data
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    #    command: [ "psql -U airflow", "ALTER SYSTEM SET wal_level = 'logical'" ]
    volumes:
      - ./postgres:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always

  redis:
    image: redis:7.2-bookworm
    container_name: redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

#  redis_exporter:
#    image: oliver006/redis_exporter:v1.5.2-alpine
#    container_name: redis_exporter
#    ports:
#      - "9121:9121"
#    command: --redis.addr=redis://redis:6379

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    container_name: airflow-webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    container_name: airflow-scheduler
    ports:
      - "8974:8974"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    container_name: airflow-worker
    hostname: ${HOSTNAME} # ini
    ports: # ini
      - "8793:8793" # ini
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      # AIRFLOW_CONN_UDR: "postgresql://postgres:admin2024.@172.20.12.150:5432,172.20.12.177:5432/udr?target_session_attrs=read-write"

      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    container_name: airflow-trigerrer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow2023}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"

    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow

  # You can enable flower by adding "--profile flower" option e.g. docker-compose --profile flower up
  # or by explicitly targeted on the command line e.g. docker-compose up flower.
  # See: https://docs.docker.com/compose/profiles/
  flower:
    <<: *airflow-common
    command: celery flower
    container_name: flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

#  statsd_exporter:
#    image: prom/statsd-exporter:v0.18.0
#    container_name: statsd_exporter
#    restart: always
#    volumes:
#      - ./files/statsd_mapping.yml:/tmp/statsd_mapping.yml
#    ports:
#      - "9102:9102"
#      - "9125:9125/udp"
#    command: --statsd.mapping-config=/tmp/statsd_mapping.yml

  # prometheus:
  #   image: prom/prometheus:v2.22.0
  #   container_name: prometheus
  #   restart: unless-stopped
  #   volumes:
  #     - ./files/prometheus.yml:/etc/prometheus/prometheus.yml
  #     - ./configs/prometheus/alerting-rules.yml:/etc/prometheus/alerting-rules.yml
  #     - ./configs/prometheus/recording-rules.yml:/etc/prometheus/recording-rules.yml
  #     - prometheus-data:/prometheus
  #   ports:
  #     - "9090:9090"
  #   command:
  #     - "--web.enable-admin-api"
  #     - "--web.enable-lifecycle"
  #     # Flags below are defaults, but must be added explicitly, otherwise would be overridden by flags above
  #     - "--config.file=/etc/prometheus/prometheus.yml"
  #     - "--storage.tsdb.path=/prometheus"
  #     - "--web.console.libraries=/usr/share/prometheus/console_libraries"
  #     - "--web.console.templates=/usr/share/prometheus/consoles"
  #     #      - '--web.external-url=http://localhost:9090'
  #     ####################################################
  #     - "--log.level=error"
  #     - "--storage.tsdb.retention.time=7d"

  #  grafana:
  #    image: grafana/grafana:7.2.1
  #    container_name: grafana
  #    restart: always
  #    ports:
  #      - "3000:3000"
  #######################################################
  #  cadvisor:
  #    image: gcr.io/cadvisor/cadvisor:${CADVISOR_VERSION:-v0.46.0}
  #    container_name: cadvisor
  #    restart: unless-stopped
  #    privileged: true
  #    ports:
  #      - 9092:9092
  #    command:
  #      - '-port=9092'
  #    volumes:
  #      - /:/rootfs:ro
  #      - /var/run:/var/run:rw
  #      - /sys:/sys:ro
  #      - /var/lib/docker:/var/lib/docker:ro
  #        # https://github.com/google/cadvisor/issues/1565#issuecomment-718812180
  #      - /var/run/docker.sock:/var/run/docker.sock
  #      #- /dev/disk:/dev/disk:ro
  #    logging: *default-logging

  #  alertmanager:
  #    image: prom/alertmanager:${ALERTMANAGER_VERSION:-v0.25.0}
  #    container_name: alertmanager
  #    command:
  #      - '--config.file=/etc/alertmanager/config.yml'
  #      - '--log.level=error'
  #      - '--storage.path=/alertmanager'
  #      - '--web.external-url=http://localhost:9093'
  #    volumes:
  #      - ./configs/alertmanager/alertmanager-fallback-config.yml:/etc/alertmanager/config.yml
  #    ports:
  #      - 9093:9093
  #    logging: *default-logging

  # node-exporter:
  #   image: prom/node-exporter:${NODE_EXPORTER_VERSION:-v1.5.0}
  #   container_name: node-exporter
  #   restart: unless-stopped
  #   volumes:
  #     - /proc:/host/proc:ro
  #     - /sys:/host/sys:ro
  #     - /:/rootfs:ro
  #   command:
  #     - "--path.procfs=/host/proc"
  #     - "--path.sysfs=/host/sys"
  #     - "--collector.filesystem.ignored-mount-points"
  #     - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
  #   logging: *default-logging
# volumes:
#   grafana-data: {}
#   prometheus-data: {}
